komanawa.basgra_nz_py.supporting_functions.plotting
===================================================

.. py:module:: komanawa.basgra_nz_py.supporting_functions.plotting

.. autoapi-nested-parse::

   Author: Matt Hanson
   Created: 1/09/2020 9:22 AM



Functions
---------

.. autoapisummary::

   komanawa.basgra_nz_py.supporting_functions.plotting.get_output_metadata
   komanawa.basgra_nz_py.supporting_functions.plotting.plot_multiple_results
   komanawa.basgra_nz_py.supporting_functions.plotting.plot_multiple_monthly_violin_box
   komanawa.basgra_nz_py.supporting_functions.plotting.plot_multiple_monthly_results
   komanawa.basgra_nz_py.supporting_functions.plotting.plot_multiple_date_range


Module Contents
---------------

.. py:function:: get_output_metadata(return_dict=True)

   note all keys are have been made uppper for consistancy.

   :param return_dict: boolean True return nested dictionary, otherwies returne dataframe
   :return:


.. py:function:: plot_multiple_results(data, outdir=None, out_vars=_outvars, fig_size=(10, 8), title_str='', rolling=None, main_kwargs={}, rolling_kwargs={}, label_rolling=False, label_main=True, show=True)

   plot multiple basgra results against each other

   :param data: dictionary of key: outputs of run_basgra()
   :param outdir: none or directory, if not None then makes outdir and saves plots
   :param out_vars: variables to make figures for, default is:

        ('WAL', 'WCLM', 'WCL', 'RAIN', 'IRRIG', 'DRAIN', 'RUNOFF', 'EVAP', 'TRAN', 'DM', 'YIELD', 'BASAL', 'ROOTD', 'WAFC')

   :param title_str: a string to append to the front of the title
   :param rolling: None or int,  generate a rolling mean of rolling days
   :param main_kwargs: other kwargs passed directly to the plot function for the main plot
   :param rolling_kwargs: other kwargs passed directly to the plot function for the rolling average
   :param label_rolling: bool if True labels are created for the rolling plot if either is true then  creates a legend
   :param label_main: bool if True labels are created for the main plot if either is true then  creates a legend
   :param show: bool if true call plt.show before function return
   :return: axs: dict(data.keys():plt.ax)


.. py:function:: plot_multiple_monthly_violin_box(data, outdir=None, out_vars=_outvars, fig_size=(10, 8), title_str='', main_kwargs={}, label_main=True, show=True, violin_plot=False)

   plot multiple basgra results as a violin plot each other shifts january to be in the middle.

   :param data: dictionary of key: outputs of run_basgra() grouped by the month, index=range(1,13)
   :param outdir: none or directory, if not None then makes outdir and saves plots
   :param out_vars: variables to make figures for, default is:

        ('WAL', 'WCLM', 'WCL', 'RAIN', 'IRRIG', 'DRAIN', 'RUNOFF', 'EVAP', 'TRAN', 'DM', 'YIELD', 'BASAL', 'ROOTD', 'WAFC')

   :param title_str: a string to append to the front of the title
   :param main_kwargs: other kwargs passed directly to the plot function for the main plot
   :param label_main: bool if True labels are created for the main plot if either is true then  creates a legend
   :param show: bool if true call plt.show before function return
   :param violin_plot: bool if True plot violin plots if False plot boxplots
   :return: axs: dict(data.keys():plt.ax)


.. py:function:: plot_multiple_monthly_results(data, outdir=None, out_vars=_outvars, fig_size=(10, 8), title_str='', main_kwargs={}, label_main=True, show=True)

   plot multiple basgra results against each other shifts january to be in the middle.

   :param data: dictionary of key: outputs of run_basgra() grouped by the month, index=range(1,13)
   :param outdir: none or directory, if not None then makes outdir and saves plots
   :param out_vars: variables to make figures for, default is:

        ('WAL', 'WCLM', 'WCL', 'RAIN', 'IRRIG', 'DRAIN', 'RUNOFF', 'EVAP', 'TRAN', 'DM', 'YIELD','BASAL', 'ROOTD', 'WAFC')

   :param title_str: a string to append to the front of the title
   :param main_kwargs: other kwargs passed directly to the plot function for the main plot
   :param label_main: bool if True labels are created for the main plot if either is true then  creates a legend
   :param show: bool if true call plt.show before function return
   :return: axs: dict(data.keys():plt.ax)


.. py:function:: plot_multiple_date_range(data, start_date, end_date, outdir=None, out_vars=_outvars, fig_size=(10, 8), title_str='', rolling=None, main_kwargs={}, rolling_kwargs={}, label_rolling=False, label_main=True, show=True)

   as per plot multiple results but for a specific date range.

   :param data: dictionary of key: outputs of run_basgra()
   :param start_date: the start date for the range to be plotted
   :param end_date: the end date for the rnage to be plotted
   :param outdir: none or directory, if not None then makes outdir and saves plots
   :param out_vars: variables to make figures for, default is:

        ('WAL', 'WCLM', 'WCL', 'RAIN', 'IRRIG', 'DRAIN', 'RUNOFF', 'EVAP', 'TRAN', 'DM', 'YIELD', 'BASAL', 'ROOTD', 'WAFC')

   :param title_str: a string to append to the front of the title
   :param rolling: None or int,  generate a rolling mean of rolling days
   :param main_kwargs: other kwargs passed directly to the plot function for the main plot
   :param rolling_kwargs: other kwargs passed directly to the plot function for the rolling average
   :param label_rolling: bool if True labels are created for the rolling plot if either is true then  creates a legend
   :param label_main: bool if True labels are created for the main plot if either is true then  creates a legend
   :param show: bool if true call plt.show before function return
   :return: axs: dict(data.keys():plt.ax)


